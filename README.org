* Improvements
  These are different headings focusing on grouping things I want to do with
  the editor. Some are more task like, others are a dumbing ground for notes on
  a feature

** Running Tests and Build Targets
   For building I would like to save different targets BY PROJECT, or at least
   program a new "prompt". I can then re-run that thing with a keybinding. For
   testing it would be good to know what the curren test is. Easiest way for
   gtest is to use tree-sitter to find the test.
   
*** Testing runner plugins as alternatives?
    - Would be great to have some gtest support?
      https://github.com/alepez/vim-gtest
    - More comprehensive testing runner solution?
      https://github.com/vim-test/vim-test
    - Another option https://github.com/nvim-neotest/neotest

** Debugging 
*** Vimspector
    This seems most promising is an option https://github.com/puremourning/vimspector

*** DAP aka Debugger Adaptor Protocol
    Its not working well for C++. Might consider
    https://github.com/sakhnik/nvim-gdb I should test it for other languages,
    like golang or python before ripping out

** LSP
   - [X] Type Heirarchy navigation, up and down the tree. This appears
     supported by clangd
     https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#typeHierarchy_supertypes
   - [ ] Inlay hints looks like it got merged, should use with toggle switch
     https://github.com/neovim/neovim/issues/18086
   - [X] show when code actions are available, like we do for diagnostics
   - [ ] Display "pending" lsp requests, so I know that something is taking a
     second vs never completing
   - [ ] "Codelens" is a thing that has a "run this function" feature. Could be
     cool to integrate to run main exe

** OrgMode Improvements
   These two things would be nice
   - [table support](https://github.com/dhruvasagar/vim-table-mode)
   - [code snippets](https://github.com/michaelb/sniprun)

** Snippets
   - Play with the keybindings, not sold on snippet selection
   - Explore the world of snippets, either making useful ones, existing ones,
     and lua scrirpting

** Autocomplete
   - `cmp-path` for filesystem paths
   - `cmp-cmdline` for command completions
   - Better sorting to prefer variable > member function > global function
   - Special config for `gitcommit` files, can be seen on `nvim-cmp` home README

** Column Display
   A thing that bugs me is when a gitsign and lsp error both show up, the
   lsp error is more on the left. It seems like this is being looked at with a
   few issues & PRs. Something they may add in 0.10 release?
     - https://github.com/neovim/neovim/issues/16632
     - https://github.com/neovim/neovim/pull/19737, the feature that will
        implement it

   Statuscolumn and Foldcolumn are options to customizing some of this. There
   seems to be a new set of features for customizing the column. Also found
   this plugin that uses the StatusColumn feature
   https://github.com/luukvbaal/statuscol.nvim

** Refactoring Tools
   - https://github.com/ThePrimeagen/refactoring.nvim
   - https://github.com/smjonas/inc-rename.nvim

* Installation
  These are the things I have installed on the system

- [packer](https://github.com/wbthomason/packer.nvim)
- [fzf](https://github.com/junegunn/fzf)
- [clangd](https://clangd.llvm.org/)
- [lua-language-server](https://github.com/sumneko/lua-language-server) using a
  pre built binary found in their releases. Work computer uses version 3.5.5 
- [ripgrep](https://github.com/BurntSushi/ripgrep) using a binary on github,
  `ripgrep_13.0.0_amd64.deb`
- [fd](https://github.com/sharkdp/fd) using a binary on github,
  `fd-musl_8.4.0_amd64.deb`
- [lldb](https://apt.llvm.org/) Specifically lldb-14. On my work ubuntu station
  I had to cleanup the path the python files, since the package appears to be
  broken. Made a symlink from `/usr/lib/lib/python3.6/site-packages` to the
  real directory `/usr/lib/llvm-14/lib/python3/dist-packages/lldb/`
- [tree-sitter](https://github.com/tree-sitter/tree-sitter/blob/master/cli/README.md)
  installed on workstation via `cargo install tree-sitter-cli`. Should be in
  path and can run `tree-sitter` command. Running `:checkheath` in vim command
  prompt, under the tree sitter section we can see if the plugin is picking it
  up
- [vim-snippets](https://github.com/honza/vim-snippets.git) installed in
  `~/.config/vim-snippets` via a `git clone`. Don't know if that's the best
  place for it, or if a submodule would be better
- [rust-analyzer](https://rust-analyzer.github.io/manual.html#rust-analyzer-language-server-binary)
  installed via `rustup component add rust-analyzer`
- [tsserver](https://github.com/Microsoft/TypeScript/wiki/Standalone-Server-%28tsserver%29)
  installed via `npm install -g typescript typescript-language-server`

** Fonts
   In the `$HOME/tools/` directory I cloned "getnf"
   https://github.com/ronniedroid/getnf to get a nerd font
   https://github.com/ryanoasis/nerd-fonts. I selected the "JetBrainsMono" font
